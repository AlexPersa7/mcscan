Welcome to MCscan's documentation!
==================================

The MCscan download page can be accessed `here <http://chibba.agtec.uga.edu/duplication/mcscan>`__. 


Usage
==================
This software provides a clustering module for viewing the relationship of colinear segments in multiple genomes (or heavily redundant genomes). It takes the predicted pairwise segments from dynamic programming (DAGchainer in particular) and then try to build consensus segments from a set of related, overlapping segments.

Certain part of this package (``dagchainer.cc``) is based on the TIGR software `DAGchainer <http://dagchainer.sf.net>`_. The program used this as an initial step to generate pairwise segments. 

Along with the DAGchainer guidelines, all code is copiable, distributable, modifiable, and usable without any restrictions. 


Installation
==================
.. note::
    MCscan currently will only run on linux or cygwin platform, as it is dependent on GNU function.

Simply put ``mcscan.tar.gz`` in any directory:: 

    $ tar zxf mcscan_version.tar.gz
    $ cd mcscan_version.tar.gz/ && make

the compiled codes are within the same directory as the source.

Then put copy of MCL executable within the same folder as MCscan (MCL program downloadable `here <http://micans.org/mcl/>`__). 


Inputs and outputs
==================
MCscan reads in at least two sources of data: a blast file and a gff file. This may seem daunting at first, but these are very easy to retrieve. Have a look at the ``at_at.blast``, ``at_at.gff`` in the folder. In the actual execution, MCL is used to generate mcl file (``at_at.mcl``), which is used in multiple synteny construction.

Here is what can be used to genenerate the files.

The blast file is the following tab-delimited format, 

``gene1``  ``gene2``  ``e-value``

easily genenerated from a m8 blast output format::

    $ cut -f 1,2,11 xyz.m8 > xyz.blast.unfiltered

The first thing please ensure that for each gene pair, only one e-value is reported, the blast output normally would contain multiple HSPs, a convenience script is attached to filter all the redundant pairs::

    $ python filter_blast.py xyz.blast.unfiltered > xyz.blast

The gff file contains the following tab-delimited format:

``molecule``  ``gene``  ``end5 position``  ``end3 position``

notice when you compare multiple genomes, formulate your molecule name carefully to avoid duplicated names. The gff file can usually be generated by parsing the gene annotation file provided by the sequencing group (usually the sequencing project ftp will provide a ``.gff3`` file).

Once you have everything ready, put them in the same folder, if it is first run, default parameters are recommended, this will also create a ``mcscan.cfg`` file inside your working folder::

    $ python mcscan.py xyz

The parameters can later be modified in config file ``mcscan.cfg``. Note that ``mcscan.py`` is just a wrapper script to call the ``mcl`` command. After the first time you run it (the ``mcl`` file has been generated). You can simply use::

    $ ./mcscan xyz


Parameters (for advanced user)
==============================
The help screen::

    [Usage] ./mcscan prefix_fn [options]
     -k  MATCH_SCORE, match bonus, final score=MATCH_SCORE+GAPS*GAP_SCORE (default: 50)
     -s  MATCH_SIZE, number of genes required to call synteny (default: 5)
     -g  GAP_SCORE, gap penalty (default: -3)
     -e  E_VALUE, alignment significance (default: 1e-05)
     -p  PIVOT, pivot is the reference genome, make it two letter prefix
         your .gff file, everything else will be aligned to the reference
         (default: ALL)
     -u  UNIT_DIST, average intergenic distance (default: 10000)
     -a  only builds the pairwise blocks (.aligns file)
     -b  limit within genome synteny (e.g. Vv-Vv) mapping
     -h  print this help page

The default values are quite generic and should work for many instances. The following are more detailed information for users who wish to tune their results.

The pairwise synteny formula is roughly (Haas et al. 2004), note that ``DIST_X``, ``DIST_Y`` is in base pair::

    FINAL_SCORE = MATCH_SCORE*num_matches+max(DIST_X, DIST_Y)/UNIT_DIST*GAP_SCORE

The multiple synteny formula is roughly, now ``DIST_X``, ``DIST_Y`` is the distance in the partial order graph (not in base unit, but in gene index unit)::

    FINAL_SCORE = MATCH_SCORE*num_matches+max(DIST_X, DIST_Y)*GAP_SCORE

Sometimes you may want to run just the pairwise synteny on ``.blast`` and ``.gff`` files, then you can try::

    $ ./mcscan at_at -a

Note that to run this, ``.mcl`` file is not required, the result is now slightly different, since MCscan uses the mcl file to filter the BLAST hits.


Walkthrough example
===================
There are, by default ``at_vv`` sets of files and ``os_sb`` sets of files, which is basically two different projects.

First example, let us compare Os to Sb (rice to sorghum), just default settings, run::

    $ python mcscan.py os_sb

It takes about one minute to run, the result is best viewed in EXCEL. The first part of the file lists all the parameters of the program. The result is separated with a line like this::

    ## View 11: pivot Sb02

This is called a view, each view uses a different chromosome as the reference. Then the blocks following this line is the multiply aligned blocks. The first column is numerical identifier, the second column is the actual pivot. Then following columns are the regions that are aligned to the pivot. The alignments between rice and sorghum are in fact complicated by one or more shared WGDs, creating several columns but mostly are four regions matching each other.

For the second example, we wish to align *Arabidopsis* to grape, and use grape as the reference genome, but we need to do it a little differently. Unlike the first example, we are not interested in WGD in grape in this case, and we only wish to see the grape used as pivot. Therefore, we modify the pivot:: 

    $ ./mcscan at_vv -p Vv -b

This trick ``-b`` will limit any Vv-Vv matches (in fact this is an older duplication called gamma) in the output.

There are two outputs. ``.aligns`` file and ``.blocks`` file, corresponding to pairwise and multiple synteny respectively. You will find the ``.aligns`` file very useful too, sometimes. But this is essentially similar to the output of DAGchainer (adding a few statistics and change the default paramters). 


Changelog
==================
* May 12, 2007 (version <0.5) initial release.
* Aug 05, 2007 (version 0.5) add the option of of a *reference* genome
* Oct 13, 2007 (version 0.6) add convenience python script to streamline the process
* Mar 07, 2008 (version 0.7) implement statistical test for pairwise syntenic blocks
* Nov 13, 2008 (version 0.8) partial-order graph for alignment

Contact
==================
Any questions, problems, bugs are welcome and should be dumped to 

Haibao Tang : bao at uga dot edu

`Plant Genome Mapping Laboratory <http://www.plantgenome.uga.edu>`_, University of Georgia

